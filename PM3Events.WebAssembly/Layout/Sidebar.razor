@using Microsoft.AspNetCore.Components;
@using Microsoft.JSInterop;
@using Radzen.Blazor.Rendering;
@using PM3Events.WebAssembly.Services

@using NavLink = PM3Events.WebAssembly.ViewModels.NavLink;

<div class="@GetCssClass()" style="@GetStyle()">
    <div class="container sidebar-top-container">
        <img class="logo" src="@AppLogo" aria-label="PM3 Logo" />
        <h2 class="logo-text">@AppName</h2>
    </div>
    <span class="sidebar-toggler" @onclick="ToggleSidebar">
        <i class="rzi">@(Expanded ? CollapseIcon : ExpandIcon)</i>
    </span>
    <span class="topbar-toggler" @onclick="ToggleSidebar">
        <i class="rzi">@(Expanded ? TopbarCollapseIcon : TopbarExpandIcon)</i>
    </span>

    <div class="sidebar-top-line"></div>

    <div class="container sidebar-navlinks-container">
        @foreach (var navLink in NavLinks.Select((value, i) => new { Index = i, Value = value }))
        {
            <div class="navlink-row" @onclick="@(_ => NavigateTo(navLink.Value.Url))">
                <i class="rzi navlink-logo">@navLink.Value.Icon</i>
                <label class="navlink-label">@navLink.Value.Label</label>
            </div>
            @if (navLink.Index < NavLinks.Count() - 1)
            {
                <div class="navlink-row-separator"></div>
            }            
        }
        <div class="navlink-row-separator login"></div>
        <div class="navlink-row login" @onclick="@(_ => NavigateTo("login"))">
            <i class="rzi navlink-logo">login</i>
            <label class="navlink-label">Log in</label>
        </div>
    </div>
    
</div>

@code {
    private const string _defaultStyle = "top:0;";
    public const string ExpandIcon = "keyboard_double_arrow_right";
    public const string CollapseIcon = "keyboard_double_arrow_left";
    public const string TopbarExpandIcon = "menu";
    public const string TopbarCollapseIcon = "close";

    public IEnumerable<NavLink> NavLinks { get; set; } = new List<NavLink>();

    [Parameter]
    public string AppName { get; set; }

    [Parameter]
    public string AppLogo { get; set; }

    /// <summary>
    /// Gets or sets the style.
    /// </summary>
    /// <value>The style.</value>
    [Parameter]
    public string Style { get; set; } = _defaultStyle;

    /// <summary>
    /// Toggles the responsive mode of the component. If set to <c>true</c> (the default) the component will be
    /// expanded on larger displays and collapsed on touch devices. Set to <c>false</c> if you want to disable this behavior.
    /// Responsive mode is only available when RadzenSidebar is inside <see cref="RadzenLayout" />.
    /// </summary>
    [Parameter]
    public bool Responsive { get; set; } = true;

    [Inject]
    public IJSRuntime JSRuntime { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    private bool IsResponsive => Responsive;

    /// <summary>
    /// Gets the style.
    /// </summary>
    /// <returns>System.String.</returns>
    protected string GetStyle()
    {
        var style = Style;

        return $"{style}{(Expanded ? ";transform:translateX(0);" : "")}";
    }

    protected string GetCssClass()
    {
        return ClassList.Create("sidebar").Add("sidebar-expanded", Expanded == true)
                                             .Add("sidebar-collapsed", Expanded == false)
                                             .Add("sidebar-responsive", IsResponsive)
                                             .ToString();
    }

    /// <summary>
    /// Gets or sets a value indicating whether this <see cref="RadzenSidebar"/> is expanded.
    /// </summary>
    /// <value><c>true</c> if expanded; otherwise, <c>false</c>.</value>
    [Parameter]
    public bool Expanded { get; set; } = false;

    /// <summary>
    /// Gets or sets the expanded changed callback.
    /// </summary>
    /// <value>The expanded changed callback.</value>
    [Parameter]
    public EventCallback<bool> ExpandedChanged { get; set; }

    bool? expanded;

    /// <inheritdoc />
    protected override void OnInitialized()
    {
        NavLinks = new List<NavLink>
            {
                new NavLink("Dashboard", "dashboard", "/dashboard")
            };

        if (!Responsive)
        {
            expanded = Expanded;
        }

        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
    }

    async Task OnChange(bool matches)
    {
        expanded = !matches;
        await ExpandedChanged.InvokeAsync(!matches);
    }

    public async Task ToggleSidebar()
    {
        Expanded = !Expanded;
        expanded = Expanded;
        await ExpandedChanged.InvokeAsync(Expanded);
        await JSRuntime.InvokeVoidAsync("setMainContainerClass", Expanded);
    }

    public void NavigateTo(string url)
    {
        NavigationManager.NavigateTo(url);
    }
}
